#ifndef TOPOLOGY_H
#define TOPOLOGY_H


#include "headers/topologyelements.h"
#include <vector>

class Topology {
private:
    std::vector<Switch> switches;   // All switches in topology
    std::vector<Host> hosts;        // All hosts in topology
    std::vector<std::vector<LinkSwitches>> linksSwitches;   // All links between switches
    // TODO think about adding links with hosts because host can be connected with more than one switch

    // TODO create Adjacency List to store all links for every host/switch and its cost
    // Prototype: <source Node> -> [<destination Node1, cost1>, <destination Node2, cost2>, ...]
    // Adjacency List will be used as Graph representation of the topology when calculating the least co
    
    // TODO test Mininet with creating host connected to many switches:
    // How it behaves?
    // How to count id of the host when using Dijkstra's algorithm?
    
public:
    Topology();

};

#endif // TOPOLOGY_H
